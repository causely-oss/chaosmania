image:
  repository: quay.io/causely/chaosmania
  pullPolicy: Always
  tag: "latest"

resources:
  limits:
    cpu: 1000m
    memory: 3Gi
  requests:
    cpu: 500m
    memory: 64Mi

serviceMonitor:
  # When set true then use a serviceMonitor to configure scraping
  enabled: true

otlp:
  enabled: true
  endpoint: "http://opentelemetry-collector.default:4318" # http://tempo.monitoring:4318
  insecure: true

datadog:
  enabled: false

hpa:
  enabled: false

betplacement:
  background_services:
    - "betplacement_consumer"
    - "analytics_consumer"

wallet:
  background_services:
    - "wallet-consumer"

betsettlement:
  background_services:
    - "betsettlement_consumer"

background_services:
  # Analytics Consumer
  - name: "analytics_consumer"
    type: kafka-consumer
    config:
      peer_service: data-broker
      peer_namespace: chaosmania
      brokers:
        - "chaosmania-kafka-cluster-kafka-bootstrap:9092"
      tls_enable: false
      sasl_enable: false
      topic: "betplacement-topic"
      group: "analytics_group"
      script: |
        function run() {
          var msg = ctx.get_message();
          var data = JSON.parse(msg);
          var video_id = data.video_id;
          var raw_data = data.raw_data;

          // Collect analytics data
          ctx.print("Analytics collected for bet: " + video_id + ", amount: " + raw_data);
        }
  # Bet Placement Consumer
  - name: "betplacement_consumer"
    type: kafka-consumer
    config:
      peer_service: data-broker
      peer_namespace: chaosmania
      brokers:
        - "chaosmania-kafka-cluster-kafka-bootstrap:9092" # TODO
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: betplacement-topic
      group: betplacement_group
      script: |
        function run() {
          var msg = ctx.get_message();
          var data = JSON.parse(msg);
          var video_id = data.video_id;
          var raw_data = data.raw_data;

          // Update the video status to encoding
          message_broker = ctx.get_service("data-broker-producer");
          msg = JSON.stringify({
              "video_id": video_id,
              "status": "encoding"
          });
          message_broker.produce(ctx.ctx, "betplacement-topic", msg);

          // Send a request to the storage service to store the video
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "videos", video_id, raw_data); 

          ctx.burn("3s")

          // Create a thumbnail
          thumbnail = ctx.random_string(1024 * 100);
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "thumbnails", video_id, thumbnail); 

          // Update the video status to encoded
          msg = JSON.stringify({
              "video_id": video_id,
              "status": "encoded"
          });
          message_broker.produce(ctx.ctx, "betplacement-topic", msg);
          message_broker.produce(ctx.ctx, "betsettlement-topic", msg);

        }

  # Bet Placement Consumer
  - name: "betsettlement_consumer"
    type: kafka-consumer
    config:
      peer_service: data-broker
      peer_namespace: chaosmania
      brokers:
        - "chaosmania-kafka-cluster-kafka-bootstrap:9092" # TODO
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: betsettlement-topic
      group: betsettlement_group
      script: |
        function run() {
          var msg = ctx.get_message();
          var data = JSON.parse(msg);
          var video_id = data.video_id;
          var raw_data = data.raw_data;

          // Update the video status to encoding
          message_broker = ctx.get_service("data-broker-producer");
          msg = JSON.stringify({
              "video_id": video_id,
              "status": "encoding"
          });
          message_broker.produce(ctx.ctx, "betsettlement-topic", msg);

          // Send a request to the storage service to store the video
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "videos", video_id, raw_data); 

          ctx.burn("3s")

          // Create a thumbnail
          thumbnail = ctx.random_string(1024 * 100);
          var storage = ctx.get_service("storage");
          storage.put_object(ctx.ctx, "thumbnails", video_id, thumbnail); 

          // Update the video status to encoded
          // msg = JSON.stringify({
          //     "video_id": video_id,
          //     "status": "encoded"
          // });
          // message_broker.produce(ctx.ctx, "betsettlement-topic", msg);

        }

  # Wallet Consumer
  - name: "wallet-consumer"
    type: kafka-consumer
    config:
      peer_service: data-broker
      peer_namespace: chaosmania
      brokers:
        - "chaosmania-kafka-cluster-kafka-bootstrap:9092" # TODO
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false
      topic: betsettlement-topic
      group: betsettlement_group
      script: |
        function run() {
          var msg = ctx.get_message();
          var data = JSON.parse(msg);
          var video_id = data.video_id;
          var raw_data = data.raw_data;

          // Collect analytics data
          ctx.print("Analytics collected for bet: " + video_id + ", amount: " + raw_data);

        }

services:
  - name: auth-cache
    type: redis
    config:
      peer_service: auth-cache
      peer_namespace: chaosmania
      address: "auth-cache:6379"

  - name: wallet-db
    type: postgresql
    config:
      peer_service: wallet-db
      peer_namespace: chaosmania
      dbname: postgres
      host: wallet-db
      maxidle: 10
      maxopen: 5
      password: postgres
      port: 5432
      user: postgres

  - name: bet-db
    type: postgresql
    config:
      peer_service: bet-db
      peer_namespace: chaosmania
      dbname: postgres
      host: bet-db
      maxidle: 10
      maxopen: 5
      password: postgres
      port: 5432
      user: postgres

  - name: "data-broker-producer"
    type: kafka-producer
    config:
      peer_service: data-broker
      peer_namespace: chaosmania
      brokers:
        - "chaosmania-kafka-cluster-kafka-bootstrap:9092" # TODO
      username: "" # TODO
      password: "" # TODO
      tls_enable: false
      sasl_enable: false

  - name: "message-broker-producer"
    type: rabbitmq-producer
    config:
      peer_service: message-broker
      peer_namespace: chaosmania
      url: "amqp://guest:guest@message-broker:5672/"

  - name: "storage"
    type: "minio"
    config:
      peer_service: storage
      peer_namespace: chaosmania
      endpoint: "storage:9000"
      accesskeyid: minioadmin
      secretaccesskey: minioadmin
      usessl: false
      buckets:
        - name: "videos"
        - name: "thumbnails"
